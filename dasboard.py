# -*- coding: utf-8 -*-
"""Dasboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12hZKcrFzWdQlAL9DqvkN5fPsNuq5RTfY
"""

!pip install dash

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd

# Load data
df = pd.read_csv("HR_Employee_Attrition.csv")

# Initialize the Dash app
app = dash.Dash(__name__)

# Define the layout of the app
app.layout = html.Div([
    html.H1("HR Analytics Dashboard", style={'color': 'orange'}),

    dcc.Graph(id='department-pie'),
    dcc.Graph(id='working-years-box'),
    dcc.Graph(id='income-by-dep-hist'),
    dcc.Graph(id='job-role-bar'),
    dcc.Graph(id='educ-field-bar')
])


# Define callbacks to update plots
@app.callback(
    Output('department-pie', 'figure'),
    Output('working-years-box', 'figure'),
    Output('income-by-dep-hist', 'figure'),
    Output('job-role-bar', 'figure'),
    Output('educ-field-bar', 'figure'),
    [Input('department-pie', 'id'),
    Input('working-years-box', 'id'),
    Input('income-by-dep-hist', 'id'),
    Input('job-role-bar', 'id'),
    Input('educ-field-bar', 'id')]
)
def update_plots(dummy_input_dep, dummy_input_hist, dummy_input_income, dummy_input_job, dummy_input_educ):
    # Calculate department distribution
    department_counts = df['Department'].value_counts()
    department_pie = px.pie(names=department_counts.index, values=department_counts.values, title='Distribution of Departments')

    # Create box plot for the distribution of working years by department using Plotly
    working_years_boxplot = px.box(df, x='Department', y='TotalWorkingYears', color='Department',
                                  title='Working Years Distribution by Department')

    # Update layout to add labels and adjust title
    working_years_boxplot.update_xaxes(title='Department')
    working_years_boxplot.update_yaxes(title='Working Years')
    working_years_boxplot.update_layout(title='Working Years Distribution by Department')

    # Create histograms for monthly income by department using Plotly
    income_histograms = px.histogram(df, x='MonthlyIncome', color='Department', facet_col='Department',
                                    facet_col_wrap=4, barmode='overlay', title='Histograms of Monthly Income by Department')

    # Update layout to add labels and adjust title
    income_histograms.update_xaxes(title='Monthly Income')
    income_histograms.update_yaxes(title='Frequency')
    income_histograms.update_layout(title='Histograms of Monthly Income by Department')

    # Calculate the count of each job role
    jobrole_counts = df['JobRole'].value_counts()

    # Create horizontal bar plot for the count of each job role using Plotly
    jobrole_count_plot = px.bar(x=jobrole_counts.values, y=jobrole_counts.index, orientation='h',
                                labels={'x': 'Count', 'y': 'Role'},
                                title='Count of Each Role', color_discrete_sequence=px.colors.qualitative.Set2)

    educ_counts = df['EducationField'].value_counts()

    # Create horizontal bar plot for the count of each education field using Plotly
    educ_count_plot = px.bar(x=educ_counts.values, y=educ_counts.index, orientation='h',
                                labels={'x': 'Count', 'y': 'Education Field'},
                                title='Count of Education Field', color_discrete_sequence=px.colors.qualitative.D3)

    return department_pie, working_years_boxplot, income_histograms, jobrole_count_plot, educ_count_plot





if __name__ == '__main__':
    app.run_server(debug=True)